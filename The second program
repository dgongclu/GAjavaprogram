import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class analysiss {
  public static void main(String[] args) {
		ArrayList<String> data = readdata("C:\\out.txt");
		ArrayList<String> result = Analysis(data);
		writedata(result,"C:\\result.txt");
	}
	private  static ArrayList<String> readdata(String path){       //use to read data from the txt file
		String r;
		ArrayList<String> data = new ArrayList<String>();
		FileReader f = null ;
		BufferedReader b = null ;
		try{
			f = new FileReader(path);
		    b = new BufferedReader(f);
		 while((r =  b.readLine())!= null) {     
             if(r !=  null && !r.equals("")  )     
             {    
            	 data.add(r);
             }            
         }
		}
		catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	finally{
		try{
	     f.close();
	     b.close();
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
		 return data;
	}
	}
	private static ArrayList<String> Analysis(ArrayList<String> data){
		String dataperline;
		String[] dataeach=null,datatemp=null;
		String dataname[];
		dataname= new String[10000];
		String resultperline;
		ArrayList<String> result =new ArrayList();
		int i,j,m=0;
		int[] support=null,nosupport=null,neutural=null,vote=null,novote=null,neuturalvote=null;
		support=new int[10000];
		nosupport=new int[10000];
		neutural=new int[10000];
		vote=new int[10000];
		novote=new int[10000];
		neuturalvote=new int[10000];
		int number1,number2,maxsize=0;
		String temp1="";
		for (i=0;i<10000;i++){
			dataname[i]=" ";
			support[i]=0;
			nosupport[i]=0;
			neutural[i]=0;
			vote[i]=0;
			novote[i]=0;
			neuturalvote[i]=0;
			
		}
		for (i=0; i< data.size();i++){
			dataperline=data.get(i);
			dataeach = dataperline.split(",");
			if (!dataeach[3].equals(temp1)){
				maxsize++;
				temp1=dataeach[3];
				dataname[m]=dataeach[3];
				m++;
			}
		}	
		for (i=0; i< data.size();i++){
			dataperline=data.get(i);
			dataeach = dataperline.split(",");
			for (j=0;j<maxsize;j++)
			{
				if(dataname[j].equals(dataeach[3])){
					if(dataeach[6].equals("1")){
						support[j]=support[j]+1;
					}
					else if(dataeach[6].equals(-1)){
						nosupport[j]++;
					}
					else{
						neutural[j]++;
					}
				}
				if(dataname[j].equals(dataeach[9])){
					if(dataeach[6].equals("1")){
						vote[j]++;
					}
					else if(dataeach[6].equals("-1")){
						novote[j]++;
					}
					else{
						neuturalvote[j]++;
					}
				}
			}
		}
		for (j=0;j<maxsize;j++){
			resultperline=dataname[j]+","+support[j]+","+String.valueOf(nosupport[j])+","+String.valueOf(neutural[j])+","+String.valueOf(vote[j])+","+String.valueOf(novote[j])+","+String.valueOf(neuturalvote[j]);
			result.add(resultperline+"\n");	
		}
		return result;
	}
	private  static void writedata(ArrayList<String> data,String path){         //use to write a data to a file
		 FileWriter f = null;
		 BufferedWriter b = null ;
		 String r;
		if (data.size() > 0 ){
		   try {
			  f = new FileWriter(path);
			  b = new BufferedWriter(f); 
	          for (int i = 0 ; i < data.size() ; i ++ ){
	        	  r = data.get(i); 
	        	  b.write(r); 
		          b.newLine();
		      }
	          b.flush();
	        
		   } catch (IOException e) {
			   // TODO Auto-generated catch block
			   e.printStackTrace();
			  
		    }
	       finally{
		try{
				f.close();
				b.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}  
		}
     }
}




